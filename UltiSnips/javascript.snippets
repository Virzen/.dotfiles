#=== vanilla js, javascript ===#
snippet im "import" !b
import ${1:{ $2 }} from '$3';
endsnippet

snippet ed "default export" !b
export default $1;
endsnippet

snippet log "console.log"
console.log(${1:${VISUAL}})
endsnippet

snippet table "console.table"
console.table($1)
endsnippet


#=== React, PropTypes ===#
snippet imr "import React" !b
import React from 'react';
endsnippet

snippet imrc "import React and Component" !b
import React, { Component } from 'react';
endsnippet

snippet imrcp "import React, Component and PropTypes" !b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
endsnippet

snippet imrp "import React and PropTypes" !b
import React from 'react';
import PropTypes from 'prop-types';
endsnippet

snippet imp "import PropTypes alone" !b
import PropTypes from 'prop-types';
endsnippet

snippet imcmp "import component" !b
import $1 from 'components/$1';
endsnippet

snippet imcnt "import container" !b
import $1 from 'containers/$1';
endsnippet

snippet tag "HTML/JSX tag" !w
<$1>${2:${VISUAL}}</$1>
endsnippet

snippet stag "HTML/JSX semiclosing tag" !w
<$1 />
endsnippet

snippet taga "HTML/JSX tag with attrs" !w
<$1 $2>${3:${VISUAL}}</$1>
endsnippet

snippet hoc "Higher-Order Component" !w
$1(${2:${VISUAL}})
endsnippet

snippet class "Stateful component" !b
class $1 extends Component {
  render() {
    return (
      ${2:${VISUAL}}
    )
  }
}
endsnippet

snippet cmp "Stateless component" !b
const $1 = ($2) => ${3:{
  return (
    <$4>$5</$4>
  );
}};
endsnippet

snippet defps "defaultProps" !b
$1.defaultProps = {
  $2
};
endsnippet

snippet pts "propTypes" !b
$1.propTypes = {
  $2
};
endsnippet

snippet pt "PropType" !w
PropTypes.$1
endsnippet

snippet ptr "required PropType" !w
PropTypes.$1.isRequired
endsnippet

snippet ptb "PropTypes.bool" !w
PropTypes.bool
endsnippet

snippet ptrb "PropTypes.bool" !w
PropTypes.bool.isRequired
endsnippet

snippet ptstr "PropTypes.string" !w
PropTypes.string
endsnippet

snippet ptrstr "PropTypes.string" !w
PropTypes.string.isRequired
endsnippet

snippet ptf "PropTypes.func" !w
PropTypes.func
endsnippet

snippet ptrf "PropTypes.func" !w
PropTypes.func.isRequired
endsnippet

snippet ptshp "PropTypes.shape({})" !w
PropTypes.shape({$1})
endsnippet

snippet ptrshp "PropTypes.shape({})" !w
PropTypes.shape({$1}).isRequired
endsnippet


#=== Redux, react-redux ===#
snippet imcn "import connect" !b
import { connect } from 'react-redux';
endsnippet

snippet rdcr "Redux reducer" !b
const initialState = ${2:{$3};}

const $1 = (state = initialState, action) => {
  switch (action.type) {
    $4
    default:
      return state;
  }
};

export default $1
endsnippet


#=== Styled components ===#
snippet imstl "import styled-components" !b
import styled from 'styled-components';
endsnippet

snippet imstlwt "import styled-components with theme" !b
import styled, { withTheme } from 'styled-components';
endsnippet

snippet stl "styled components" !b
const $1 = styled.$2\`
  $3
\`;
endsnippet


#=== ESLint linter ===#
snippet esdl "eslint-disable-next-line" !b
// eslint-disable-next-line $1
endsnippet


#=== tests testing ===#
snippet imrtr
import renderer from 'react-test-renderer';
endsnippet

snippet desc "describe block" !b
describe('$1', () => {
  $2
});
endsnippet

snippet it "it block" !b
it('$1', () => {
  $2
});
endsnippet

snippet exp "expect"
expect($1).to$2;
endsnippet

snippet snap "jest snapshot" !b
const tree = renderer.create(
  $1
);

expect(tree).toMatchSnapshot();
endsnippet


#=== Storybook ===#
snippet story "Storybook story" !b
import React from 'react';
import { storiesOf } from '@storybook/react';

import $1 from './';

storiesOf('$1', module)
  .add('basic', () => {
    return <$1 />
  })
endsnippet

snippet darkbg "DarkBg decorator" !b
  .addDecorator(story => (
    <DarkBg>{story()}</DarkBg>
  ))
endsnippet


#=== react-intl, i18n, internationalization ===#
snippet imfm "import FormattedMessage" !b
import { FormattedMessage } from 'react-intl';
endsnippet

snippet imii "import FormattedMessage" !b
import { injectIntl } from 'react-intl';
endsnippet

snippet imfmii "import FormattedMessage" !b
import { FormattedMessage, injectIntl } from 'react-intl';
endsnippet

snippet fm "FormattedMessage" !w
<FormattedMessage id="$1" />
endsnippet

snippet fmv "FormattedMessage with values" !w
<FormattedMessage id="$1" ${2:values={{$3}} }/>
endsnippet

snippet ifm "intl.formatMessage" !w
intl.formatMessage({ id: '$1' })
endsnippet

snippet ifmv "intl.formatMessage with values" !w
intl.formatMessage({ id: '$1', values: {$2} })
endsnippet


#=== Spideo ===#
snippet imclr "import color(s)" !b
import { $1 } from 'constants/styles/colors';
endsnippet

snippet imfnt "import font(s)" !b
import { $1 } from 'constants/styles/fonts';
endsnippet
